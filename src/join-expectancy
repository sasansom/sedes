#!/usr/bin/env python3

# Usage:
#   join-expectancy corpus/work.csv expectancy.all.csv > joined.csv
#
# Outputs work.csv, augmented with rows from expectancy.all.csv that match in
# the "lemma" and "sedes" columns (left outer join).

import csv
import getopt
import sys

def usage(file = sys.stdout):
    print(f"""\
Usage: {sys.argv[0]} WORK.CSV [WORK.CSV...] EXPECTANCY.CSV > JOINED.CSV

Outputs the contents of the WORK.CSV inputs, augmented with the rows from
EXPECTANCY.CSV that match on the "lemma" and "sedes" columns.
""", end="", file=file)

COMMON_FIELDS = ("lemma", "sedes")

def unique(s):
    result = []
    for x in s:
        if x not in result:
            result.append(x)
    return result

# Acts like a csv.DictReader over multiple files consecutively. Asserts that the
# fieldnames of all files are identical.
class MultiDictReader:
    def __init__(self, filenames):
        self.filenames = filenames
        self.first_file = open(self.filenames[0])
        self.first_reader = csv.DictReader(self.first_file)
        self.fieldnames = self.first_reader.fieldnames

    def __iter__(self):
        try:
            for row in self.first_reader:
                yield row
        finally:
            self.first_file.close()
        for filename in self.filenames[1:]:
            with open(filename) as f:
                reader = csv.DictReader(f)
                assert reader.fieldnames == self.fieldnames, (self.filenames[0], reader.fieldnames, filename, self.fieldnames)
                for row in reader:
                    yield row

def join(left, right_file, fieldnames, output):
    right = csv.DictReader(right_file)
    output = csv.DictWriter(output, fieldnames = unique(left.fieldnames + right.fieldnames), lineterminator = "\n")
    output.writeheader()

    lookup = {}
    for row in right:
        if not row["lemma"]:
            row["lemma"] = row["word"]
        key = tuple(row[x] for x in fieldnames)
        lookup.setdefault(key, [])
        lookup[key].append(row)

    for row in left:
        if not row["lemma"]:
            row["lemma"] = row["word"]
        key = tuple(row[x] for x in fieldnames)
        matches = lookup.get(key)
        if not matches:
            # If no matches, output the row unmodified (with empty strings for
            # the missing fields).
            output.writerow(row)
        else:
            for match in matches:
                output.writerow({**row, **match})

def main():
    opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["help"])
    for o, _ in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)

    try:
        (*work_filenames, expectancy_filename) = args
    except ValueError:
        usage(sys.stderr)
        sys.exit(1)
    if not work_filenames:
        usage(sys.stderr)
        sys.exit(1)
    works = MultiDictReader(work_filenames)
    with open(expectancy_filename) as expectancy:
        join(works, expectancy, COMMON_FIELDS, sys.stdout)

if __name__ == "__main__":
    main()
