#!/usr/bin/env python3

# Extracts words and their sedes from a TEI XML document and writes the words to
# standard output as CSV, one row per word.
#
# Usage:
#   tei2csv IDENTIFIER FILENAME.xml > FILENAME.csv
# IDENTIFIER is a short text identifier for the work that will be copied to the
# output; e.g., "Il.". FILENAME.xml is the name of the XML document containing
# the text of the work.

import csv
import getopt
import re
import sys
import unicodedata

import appositive
import lemma as lemma_mod
import sedes
import tei

MERGE_WORD_OPTIONS = {
    "word": appositive.merge_word,
    "appositive-group": appositive.merge_appositive_group,
}

def usage(file=sys.stdout):
    print(f"""\
Usage: {sys.argv[0]} IDENTIFIER FILENAME.xml > FILENAME.csv

IDENTIFIER is a short text identifier for the work; e.g., "Il.".
FILENAME.XML is a TEI XML document containing the text of the work.

  --word-unit=UNIT  merge words according to the given unit (default "word")
                    known units: {', '.join(sorted(MERGE_WORD_OPTIONS.keys()))}
  -h, --help        show this help
""", end="", file=file)

def normalize(s):
    return unicodedata.normalize("NFD", s)

def assign_sedes_for_line(line):
    """From a line, return num_scansions and a sequence of (word, word_n, sedes, shape)
    tuples. sedes will be non-blank if and only if num_scansions is equal to 1."""
    assignments = sedes.analyze(line.text_without_quotes())
    if len(assignments) == 1:
        return len(assignments), tuple((word, word_n, sedes, shape) for (word, word_n, sedes, shape) in assignments[0])
    else:
        # If no scansions or multiple scansions, output "".
        return len(assignments), tuple((word, word_n+1, "", "") for (word_n, word) in enumerate(line.words()))

def process(f, work_identifier, merge_word):
    seen_lines = set()
    doc = tei.TEI(f)
    for loc, line in doc.lines():
        if (loc.book_n, loc.line_n) in seen_lines:
            print(f"warning: {work_identifier}: duplicate line {loc!r}", file=sys.stderr)
        seen_lines.add((loc.book_n, loc.line_n))
        # print(repr(line.text()))
        # print(repr(line.text_without_quotes()))
        if line.text_without_quotes() in sedes.KNOWN_SCANSIONS:
            scanned = "manual"
        else:
            scanned = "auto"
        num_scansions, assignment = assign_sedes_for_line(line)
        lemmata = []
        entries = []
        for word, word_n, pos, shape in assignment:
            lemma = lemma_mod.lookup(word, (work_identifier, loc.book_n, loc.line_n, word_n))
            if lemma is None:
                lemma = word # Use the word itself as lemma if lemmatization fails.
            lemmata.append(lemma)
            entries.append(appositive.Entry(word_n, word, lemma))
        groups = merge_word(entries, work_identifier, loc.book_n, loc.line_n)
        for group in groups:
            yield {
                "work": work_identifier,
                "book_n": loc.book_n,
                "line_n": loc.line_n,
                "word_n": assignment[group[0]][1],
                "word": normalize(" ".join(assignment[i][0] for i in group)),
                "scanned": scanned,
                "num_scansions": num_scansions,
                "sedes": assignment[group[0]][2],
                "metrical_shape": "".join(assignment[i][3] for i in group),
                "lemma": " ".join(lemmata[i] for i in group),
                "line_text": normalize(line.text()),
            }

def main():
    merge_word = appositive.merge_word
    opts, args = getopt.gnu_getopt(sys.argv[1:], "h", ["help", "word-unit="])
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif o in ("--word-unit"):
            try:
                merge_word = MERGE_WORD_OPTIONS[a]
            except KeyError:
                print(f"error: unknown --word-unit {a!r}", file=sys.stderr)
                print("known units:", ", ".join(sorted(MERGE_WORD_OPTIONS.keys())), file=sys.stderr)
                sys.exit(1)

    try:
        work_identifier, input_filename = args
    except ValueError:
        print("error: usage error", file=sys.stderr)
        print(file=sys.stderr)
        usage(sys.stderr)
        sys.exit(1)

    csv_w = csv.DictWriter(
        sys.stdout,
        [
            "work",
            "book_n",
            "line_n",
            "word_n",
            "word",
            "lemma",
            "sedes",
            "metrical_shape",
            "scanned",
            "num_scansions",
            "line_text",
        ],
        lineterminator="\n",
    )
    csv_w.writeheader()
    with open(input_filename) as f:
        for row in process(f, work_identifier, merge_word):
            csv_w.writerow(row)

if __name__ == "__main__":
    main()
